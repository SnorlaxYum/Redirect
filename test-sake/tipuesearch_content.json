{"pages":[{"title":"Resolving Conflicts in Git","text":"First add the upstream remote then fetch it. 1 git remote add upstream https://repoA git fetch upstream Check out the branch (in this case, notification ) and auto-merge it with the upstream master. 1 git checkout notification git merge upstream/master Resolve the conflicts by fully accept my or their version 2 : Accept my version (local, ours): git checkout --ours -- [filename] git add [filename] git commit -m \"merged bla bla\" Accept their version (remote, theirs): git checkout --theirs -- [filename] git add [filename] git commit -m \"merged bla bla\" Do all conflict files with either mine or theirs: git merge --strategy-option ours or git merge --strategy-option theirs How to solve merge conflicts across forks? - stackoverflow ↩ ↩ How to resolve merge conflicts in Git - stackoverflow ↩","tags":"Terminal","url":"https://test.snorl.ax/terminal/2019/04/15/resolving-conflicts-in-git/"},{"title":"Running email service on my own server!","text":"Env: Debian Stretch 1 2 If u want to follow the procedures below, be sure to replace informations like URL with ur own choice of configuration, Update Hosts Verify that the /etc/hosts file contains lines for the server's public IP address and is associated with the Fully Qualified Domain Name (FQDN). In the examples below, the public IP address of my VPS is 12.34.56.78 and 2aaa:bbb:dddd:eeee::1 and the FQDN is mail.snorl.ax . ... 12.34.56.78 mail.snorl.ax mail ... 2aaa:bbb:dddd:eeee::1 Be sure to add an A Record for it. If assigned, AAAA of IPV6 is also needed. mail.snorl.ax A 10 12.34.56.78 mail.snorl.ax AAAA 10 2aaa:bbb:dddd:eeee::1 Change the hostname to it as well 10 . $ sudo hostname mail.snorl.ax Be sure to configure Reverse DNS for the IP to point to mail.snorl.ax . Software Installation I'm using Debian Stretch on my Linode VPS, so I installed from stretch-backports 3 . For backports to work, a line like the following one should be added to the /etc/apt/sources.list : deb http://ftp.debian.org/debian stretch-backports main The address could be my choice of source containing the backports, what I added before installation is: deb http://mirrors.linode.com/debian stretch-backports main Then I installed the packages using the command: $ sudo apt -t stretch-backports install postfix-pgsql sasl2-bin libsasl2-modules postgresql libpam-pgsql dovecot-pgsql dovecot-imapd dovecot-pop3d Configuring PostgreSQL Edit /etc/postgresql/pg_hba.conf to accept password authentication for localhost: host all all 127.0.0.1 255.255.255.255 password Create the database: $ sudo su postgres $ createdb mails $ psql mails Create tables: CREATE TABLE transport ( domain VARCHAR(128) NOT NULL, transport VARCHAR(128) NOT NULL, PRIMARY KEY (domain) ); CREATE TABLE users ( userid VARCHAR(128) NOT NULL, password VARCHAR(128), realname VARCHAR(128), uid INTEGER NOT NULL, gid INTEGER NOT NULL, home VARCHAR(128), mail VARCHAR(255), PRIMARY KEY (userid) ); CREATE TABLE virtual ( address VARCHAR(255) NOT NULL, userid VARCHAR(255) NOT NULL, PRIMARY KEY (address) ); create view postfix_mailboxes as select userid, home||'/' as mailbox from users union all select domain as userid, 'dummy' as mailbox from transport; create view postfix_virtual as select userid, userid as address from users union all select userid, address from virtual; Create separate users for read and write accesses. Postfix and Dovecot needs only read access. I may want to use the writer user for your own purposes. CREATE USER mailreader PASSWORD 'secret'; grant select on transport, users, virtual, postfix_mailboxes, postfix_virtual to mailreader; create user mailwriter password 'secret'; grant select, insert, update, delete on transport, users, virtual, postfix_mailboxes, postfix_virtual to mailwriter; Add domain, user to the database. The examples below add the domain snorl.ax and a user with the mail address kim@snorl.ax : insert into transport ( domain , transport ) values ( 'snorl.ax' , 'virtual:' ); insert into users ( userid , uid , gid , home ) values ( 'user@snorl.ax' , 5000 , 5000 , 'snorl.ax/mails/user' ); insert into users ( userid , uid , gid , home ) values ( 'user2@snorl.ax' , 5000 , 5000 , 'snorl.ax/mails/user2' ); insert into virtual ( address , userid ) values ( 'kim@snorl.ax' , 'user@snorl.ax' ); The password for a user can be generated using doveadm utility 4 : $ doveadm pw -s CRYPT It will prompt me to enter the password twice: Enter new password: Retype new password: Then it will print a encrypted string like the one below for me to write into the database: {CRYPT}1cElWVzS3.EVg To do something with the password, access the psql utility again: $ sudo su postgres $ psql mails To update an existing user with the password: UPDATE users SET password='{CRYPT}1cElWVzS3.EVg' WHERE userid='user@snorl.ax'; To set the password when creating the user: insert into users (userid, password, uid, gid, home) values ('user3@snorl.ax', '{CRYPT}1cElWVzS3.EVg', 5000, 5000, 'snorl.ax/mails/user3'); Self-check. To check the existing user: SELECT * FROM users; A table like this will be shown: userid | password | realname | uid | gid | home | mail ----------------+----------------------------------------------------------------------------+----------+------+------+----------------------+------ user1@snorl.ax | {CRYPT}xxxxxxxxxxxxx | | 5000 | 5000 | snorl.ax/mails/user1 | user@snorl.ax | {CRYPT}xxxxxxxxxxxxx | | 5000 | 5000 | snorl.ax/mails/user | To check the correspondence between username and mail address: SELECT * FROM virtual; A table similar to the following one will be shown: address | userid ----------------+---------------- kim@snorl.ax | user@snorl.ax xxx@snorl.ax | user2@snorl.ax xxxx@snorl.ax | user1@snorl.ax Create the folder and user for mail Create /var/mail/vhosts/ and the folder named my domain: $ sudo mkdir -p /var/mail/vhosts/snorl.ax Create the group and the user for it: $ sudo groupadd -g 5000 vmail $ sudo useradd -g vmail -u 5000 vmail -d /var/mail Change the owner of the /var/mail/ folder and its contents to belong to vmail : $ sudo chown -R vmail:vmail /var/mail Configuring Postfix Edit /etc/postfix/main.cf to set the following values 12 : transport_maps = pgsql:/etc/postfix/transport.cf virtual_uid_maps = pgsql:/etc/postfix/uids.cf virtual_gid_maps = pgsql:/etc/postfix/gids.cf virtual_mailbox_base = /var/mail/vhosts virtual_mailbox_maps = pgsql:/etc/postfix/mailboxes.cf virtual_maps = pgsql:/etc/postfix/virtual.cf virtual_alias_maps = hash:/etc/postfix/virtual mydestination = localhost.$mydomain, $myhostname smtpd_relay_restrictions = permit_mynetworks, permit_sasl_authenticated, reject_unauth_destination smtpd_sasl_auth_enable = yes smtpd_sasl_security_options = noanonymous smtpd_sasl_local_domain = mail.snorl.ax smtp_sasl_auth_enable = no myorigin = $mydomain Edit /etc/postfix/sasl/smtpd.conf to include the following lines: pwcheck_method : saslauthd saslauthd_path : /etc/ mux /etc/postfix/transport.cf user=mailreader password=secret dbname=mails table=transport select_field=transport where_field=domain hosts=localhost /etc/postfix/uids.cf user=mailreader password=secret dbname=mails table=users select_field=uid where_field=userid hosts=localhost /etc/postfix/gids.cf user=mailreader password=secret dbname=mails table=users select_field=gid where_field=userid hosts=localhost /etc/postfix/mailboxes.cf user=mailreader password=secret dbname=mails table=postfix_mailboxes select_field=mailbox where_field=userid hosts=localhost /etc/postfix/virtual.cf user=mailreader password=secret dbname=mails table=postfix_virtual select_field=userid where_field=address hosts=localhost By default, these two lines are included in /etc/postfix/main.cf : alias_maps = hash:/etc/aliases alias_database = hash:/etc/aliases It's for the local delivery, meant to be sent to the users on the computer. Since I have the virtual domain and mailboxes, it will be more convenient to forward it to the mailbox. Put the lines in /etc/aliases : # user: the mail address kim: kim@snorl.ax root: root@snorl.ax Then update: $ sudo newaliases In /etc/postfix/virtual 11 : kim@mail.snorl.ax user@snorl.ax xxx@mail.snorl.ax user2@snorl.ax xxxx@mail.snorl.ax user1@snorl.ax @mail.snorl.ax user@snorl.ax Then generate the hash: $ sudo postmap /etc/postfix/virtual In this case, local delivery includes sending from outside to addresses like kim@mail.snorl.ax . Mails sent to that address will be forwarded to kim@snorl.ax . Mail sent to an unexisted address like unexisted@mail.snorl.ax will be forwarded to kim@snorl.ax . Configuring SASL2 Edit /etc/default/saslauthd : START=yes MECHANISMS=pam PARAMS=\"-r -m /var/spool/postfix/etc\" /etc/pam_pgsql.conf database = mails host = localhost user = mailreader password = secret table = users user_column = userid pwd_column = password #expired_column = acc_expired #newtok_column = acc_new_pwreq pw_type = crypt #debug Create /etc/pam.d/smtp : auth required pam_pgsql.so account required pam_pgsql.so password required pam_pgsql.so Put the following line to /etc/postfix/sasl/smtpd.conf : mech_list : login plain Configuring Dovecot Put the following lines in the /etc/dovecot/dovecot.conf : mail_location = maildir:~/ passdb { args = /usr/local/etc/dovecot-sql.conf driver = sql } userdb { args = /usr/local/etc/dovecot-sql.conf driver = sql } mail_privileged_group = vmail /usr/local/etc/dovecot-sql.conf driver = pgsql connect = host=localhost dbname=mails user=mailreader password=secret default_pass_scheme = CRYPT password_query = SELECT userid as user, password FROM users WHERE userid = '%u' user_query = SELECT '/var/mail/vhosts/'||home AS home, uid, gid FROM users WHERE userid = '%u' Ensure the following line is included in /etc/dovecot/conf.d/10-auth.conf 5 : disable_plaintext_auth = no I'll switch this back to yes or other options afterward. Plain text is for test. Configure DNS When I'm ready to send and receive mails from my server, I should edit the domain's MX record so it points to the IP address of the server, similar to the examples below: mail.snorl.ax A 10 12.34.56.78 mail.snorl.ax AAAA 10 2aaa:bbb:dddd:eeee::1 snorl.ax MX 10 mail.snorl.ax Testing Imap Restart the relevant services before testing: sudo systemctl restart saslauthd postgresql postfix dovecot Install the Mailutils package: sudo apt-get install mailutils Log into an email account like gmail to send an email to kim@snorl.ax , then check if there's any message: sudo mail -f /var/mail/vhosts/snorl.ax/mails/user Now test imap using an Email Client like ThunderBird: Username: user@snorl.ax , the login name of kim@snorl.ax . Password: The one I just set, not the encrypted string. The one before being encrypted. Server name: mail.snorl.ax , or the IP address of the server. SSL: None Port: 143 SMTP Method 1: SMTP Relay An email sent from a server IP can easily go to Spam Folder if the IP reputation is bad or something is not configured correctly on the server, so it is safe to use an email delivery service. I've used Amazon SES and Sendgrid. Both of them perform perfectly. Amazon SES charges $0.10 for every 1,000 emails you send. Sendgrid charges at least $14.95 monthly if u exceed 100 mails/day. However u'll need request for a sending quota increase to get started with Amazon SES, while u can start with it as soon as u register on Sendgrid. The documentations below r quite useful if u r using either of the email delivery services. They clarify how to configure the service and integrate it with Postfix and email client. Some documentations useful for using Sendgrid : How to set up domain authentication Integrating With the SMTP API Integrate SendGrid with Postfix Some documentations useful for using Amazon SES : Amazon SES Quick Start Integrating Amazon SES with Postfix Configuring Email Clients to Send Through Amazon SES Using a Custom MAIL FROM Domain with Amazon SES SMTP Method 2: Postfix SASL 6 It is generally better to use my own server to send mails if I wanna have my own business and the IP reputation starts at least neutral. To find out what SASL implementations are compiled into Postfix, use the following commands: $ postconf -a ( SASL support in the SMTP server ) $ postconf -A ( SASL support in the SMTP+LMTP client ) Configure SSL Generate a certificate for the domain (I use certbot) and configure postfix and dovecot to use it. My ceritficate location: Cert: /etc/letsencrypt/live/snorl.ax/fullchain.pem Key: /etc/letsencrypt/live/snorl.ax/privkey.pem Set the values in /etc/postfix/main.cf : smtpd_tls_cert_file=/etc/letsencrypt/live/snorl.ax/fullchain.pem smtpd_tls_key_file=/etc/letsencrypt/live/snorl.ax/privkey.pem Add the block into /etc/dovecot/conf.d/10-ssl.conf : local_name mail.snorl.ax { ssl_cert = </etc/letsencrypt/live/snorl.ax/fullchain.pem ssl_key = >/etc/letsencrypt/live/snorl.ax/privkey.pem } Restart them to see the effect: $ sudo systemctl restart dovecot postfix Postfix to Dovecot SASL communication It saves hassle to configure Postfix to Dovecot SASL communication. Relevant block in /etc/dovecot/conf.d/10-master.conf (to place the Dovecot SASL socket in the path and make it writable and readable by user and group postfix only): service auth { ... unix_listener /var/spool/postfix/private/auth { mode = 0660 # Assuming the default Postfix user and group user = postfix group = postfix } ... } Specify the following value in /etc/dovecot/conf.d/10-auth.conf : auth_mechanisms = plain login Enabling SASL authentication in the Postfix SMTP server Specify the following value in /etc/postfix/main.cf : smtpd_sasl_type = dovecot smtpd_sasl_path = private/auth smtpd_sasl_auth_enable = yes broken_sasl_auth_clients = yes Postfix SMTP Server policy - SASL mechanism properties Set the desired values in /etc/postfix/main.cf . Deny anonymous authentication: smtpd_sasl_security_options = noanonymous smtpd_sasl_tls_security_options = $smtpd_sasl_security_options A more sophisticated policy allows plaintext mechanisms, but only over a TLS-encrypted connection: smtpd_sasl_security_options = noanonymous, noplaintext smtpd_sasl_tls_security_options = noanonymous To offer SASL authentication only after a TLS-encrypted session has been established specify this: smtpd_tls_auth_only = yes Mail relay authorization Set the desired values in /etc/postfix/main.cf . With permit_sasl_authenticated the Postfix SMTP server can allow SASL-authenticated SMTP clients to send mail to remote destinations. Examples: smtpd_relay_restrictions = permit_mynetworks permit_sasl_authenticated reject_unauth_destination ...other rules... Envelope sender address authorization In /etc/postfix/main.cf , configure smtpd_sender_login_maps and add reject_sender_login_mismatch before permit_sasl_authenticated in smtpd_recipient_restrictions : smtpd_sender_login_maps = hash:/etc/postfix/controlled_envelope_senders smtpd_relay_restrictions = ... reject_sender_login_mismatch permit_sasl_authenticated ... The table in /etc/postfix/controlled_envelope_senders should be configured like this: # envelope sender owners (SASL login names) kim@snorl.ax user@snorl.ax som@snorl.ax user1@snorl.ax On the left is the email address, on the right is the login name. Generate the database: $ sudo postmap /etc/postfix/controlled_envelope_senders Now, the Postfix SMTP server knows who the sender is. Given a table of envelope sender addresses and SASL login names, the Postfix SMTP server can decide if the SASL authenticated client is allowed to use a particular envelope sender address. Testing SASL authentication in the Postfix SMTP Server To test the server side, connect (for example, with telnet ) to the Postfix SMTP server port and you should be able to have a conversation as shown below. Information sent by the client is shown in bold font. $ telnet server.example.com 25 ... 220 server.example.com ESMTP Postfix EHLO client.example.com 250-server.example.com 250-PIPELINING 250-SIZE 10240000 250-ETRN 250-AUTH DIGEST-MD5 PLAIN CRAM-MD5 250 8BITMIME AUTH PLAIN AHRlc3QAdGVzdHBhc3M= 235 Authentication successful To test this over a connection that is encrypted with TLS, use openssl s_client instead of telnet: $ openssl s_client -connect server.example.com:25 -starttls smtp ... 220 server.example.com ESMTP Postfix EHLO client.example.com ...see above example for more... Use a recent version of bash shell and replace the AHRlc3QAdGVzdHBhc3M= above with the output of this command: echo -ne '\\000username\\000password' | openssl base64 Enabling SASL authentication in the Postfix SMTP/LMTP client Set the values in /etc/postfix/main.cf : smtp_sasl_auth_enable = yes smtp_tls_security_level = encrypt smtp_sasl_password_maps = pgsql:/etc/postfix/password.cf In /etc/postfix/password.cf : user=mailreader password=secret dbname=mails table=users select_field=password where_field=userid hosts=localhost Restart postfix to see the effect: $ sudo systemctl restart postfix Open the submission port The submission port is recommended to be used for smtp. Uncomment the following line in /etc/postfix/master.cf : submission inet n - y - - smtpd Restart postfix to see the effect: $ sudo systemctl restart postfix Configure SPF and DKIM 7 8 Install DKIM, SPF and PostfixPermalink, $ sudo apt-get install opendkim opendkim-tools postfix-policyd-spf-python postfix-pcre SPF Add spf as a TXT Record to DNS: snorl.ax TXT \"v=spf1 mx -all\" Add the following entry to /etc/postfix/master.cf : policyd-spf unix - n n - 0 spawn user=policyd-spf argv=/usr/bin/policyd-spf Configure the following value in /etc/postfix/main.cf : policyd-spf_time_limit = 3600 In /etc/postfix/main.cf , edit the smtpd_relay_restrictions entry to add a check_policy_service entry: smtpd_relay_restrictions = ... reject_unauth_destination, check_policy_service unix:private/policyd-spf, ... Make sure to add the check_policy_service entry after the reject_unauth_destination entry to avoid having your system become an open relay. If reject_unauth_destination is the last item in your restrictions list, add the comma after it and omit the comma at the end of the check_policy_service item above. Restart Postfix. $ sudo systemctl restart postfix Check the operation of the policy agent by looking at raw headers on incoming email messages for the SPF results header. The header the policy agent adds to messages should look something like this: Received-SPF : Pass ( sender SPF authorized ) identity = mailfrom ; client-ip = 127 . 0 . 0 . 1 ; helo = mail . snorl . ax ; envelope-from = text @ snorl . ax ; receiver = tknarr @ silverglass . org DKIM Edit /etc/opendkim.conf : # This is a basic configuration that can easily be adapted to suit a standard # installation. For more advanced options, see opendkim.conf(5) and/or # /usr/share/doc/opendkim/examples/opendkim.conf.sample. # Log to syslog Syslog yes # Required to use local socket with MTAs that access the socket as a non- # privileged user (e.g. Postfix) UMask 002 # OpenDKIM user # Remember to add user postfix to group opendkim UserID opendkim # Map domains in From addresses to keys used to sign messages KeyTable /etc/opendkim/key.table SigningTable refile:/etc/opendkim/signing.table # Hosts to ignore when verifying signatures ExternalIgnoreList /etc/opendkim/trusted.hosts InternalHosts /etc/opendkim/trusted.hosts # Commonly-used options; the commented-out versions show the defaults. Canonicalization relaxed/simple Mode sv SubDomains no #ADSPAction continue AutoRestart yes AutoRestartRate 10/1M Background yes DNSTimeout 5 SignatureAlgorithm rsa-sha256 # Always oversign From (sign using actual From and a null From to prevent # malicious signatures header fields (From and/or others) between the signer # and the verifier. From is oversigned by default in the Debian package # because it is often the identity key used by reputation systems and thus # somewhat security sensitive. OversignHeaders From # Socket smtp://localhost # # ## Socket socketspec # ## # ## Names the socket where this filter should listen for milter connections # ## from the MTA. Required. Should be in one of these forms: # ## # ## inet:port@address to listen on a specific interface # ## inet:port to listen on all interfaces # ## local:/path/to/socket to listen on a UNIX domain socket # Socket inet:8892@localhost ## PidFile filename ### default (none) ### ### Name of the file where the filter should write its pid before beginning ### normal operations. # PidFile /var/run/opendkim/opendkim.pid Ensure the permission is correctly set: $ sudo chmod u = rw,go = r /etc/opendkim.conf Create directory for OpenDKIM's data files: $ sudo mkdir -p /etc/opendkim/keys $ sudo chown -R opendkim:opendkim /etc/opendkim $ sudo chmod go-rw /etc/opendkim/keys Create /etc/opendkim/signing.table *@snorl.ax sim Create /etc/opendkim/key.table sim snorl.ax:YYYYMM:/etc/opendkim/keys/example.private replace the YYYYMM with the current 4-digit year and 2-digit month (this is referred to as the selector) Create /etc/opendkim/trusted.hosts 127.0.0.1 ::1 localhost sim sim.snorl.ax snorl.ax Set the permission: $ sudo chown -R opendkim:opendkim /etc/opendkim $ sudo chmod -R go-rwx /etc/opendkim/keys Generate the key: $ sudo opendkim-genkey -b 2048 -h rsa-sha256 -r -s YYYYMM -d example.com -v Move it to the set path: $ sudo mv YYYYMM.private /etc/opendkim/keys/example.private $ sudo mv YYYYMM.txt /etc/opendkim/keys/example.txt Make sure all the files in the dir have correct permissions: $ cd /etc $ sudo chown -R opendkim:opendkim /etc/opendkim $ sudo chmod -R go-rw /etc/opendkim/keys Restart to see if there's any error: $ sudo systemctl restart opendkim Check it if there's any error: $ sudo systemctl status -l opendkim For example, in /etc/opendkim/keys/example.txt : 201510._domainkey IN TXT ( \"**v=DKIM1; h=rsa-sha256; k=rsa; s=email; \" \"p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu5oIUrFDWZK7F4thFxpZa2or6jBEX3cSL6b2TJdPkO5iNn9vHNXhNX31nOefN8FksX94YbLJ8NHcFPbaZTW8R2HthYxRaCyqodxlLHibg8aHdfa+bxKeiI/xABRuAM0WG0JEDSyakMFqIO40ghj/h7DUc/4OXNdeQhrKDTlgf2bd+FjpJ3bNAFcMYa3Oeju33b2Tp+PdtqIwXR\" \"ZksfuXh7m30kuyavp3Uaso145DRBaJZA55lNxmHWMgMjO+YjNeuR6j4oQqyGwzPaVcSdOG8Js2mXt+J3Hr+nNmJGxZUUW4Uw5ws08wT9opRgSpn+ThX2d1AgQePpGrWOamC3PdcwIDAQAB**\" ) ; ----- DKIM key 201510 for example.com The value inside the parentheses is needed. Select and copy the entire region from (but not including) the double-quote before v=DKIM1 on up to (but not including) the final double-quote before the closing parentheses. Then edit out the double-quotes within the copied text and the whitespace between them. Also change h=rsa-sha256 to h=sha256. From the above file the result would be: v=DKIM1; h=sha256; k=rsa; s=email; p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu5oIUrFDWZK7F4thFxpZa2or6jBEX3cSL6b2TJdPkO5iNn9vHNXhNX31nOefN8FksX94YbLJ8NHcFPbaZTW8R2HthYxRaCyqodxlLHibg8aHdfa+bxKeiI/xABRuAM0WG0JEDSyakMFqIO40ghj/h7DUc/4OXNdeQhrKDTlgf2bd+FjpJ3bNAFcMYa3Oeju33b2Tp+PdtqIwXRZksfuXh7m30kuyavp3Uaso145DRBaJZA55lNxmHWMgMjO+YjNeuR6j4oQqyGwzPaVcSdOG8Js2mXt+J3Hr+nNmJGxZUUW4Uw5ws08wT9opRgSpn+ThX2d1AgQePpGrWOamC3PdcwIDAQAB Paste that into the value for the TXT record in DNS: 201510._domainkey.snorl.ax TXT The_Value Test the key: $ opendkim-testkey -d snorl.ax -s YYYYMM To hook it into the postfix, edit /etc/postfix/main.cf : # OpenDKIM milter_default_action = accept # Postfix ≥ 2.6 milter_protocol = 6, Postfix ≤ 2.5 milter_protocol = 2 milter_protocol = 6 smtpd_milters = inet:127.0.0.1:8892 non_smtpd_milters = $smtpd_milters Add user postfix to group opendkim: $ sudo usermod -a -G opendkim postfix Restart them. $ sudo systemctl restart opendkim postfix Verify if everything's working by sending a test e-mail to check-auth@verifier.port25.com using an email client configured to submit mail to the submission port on the mail server. Set up Domain Message Authentication, Reporting & Conformance (DMARC) Add the following TXT record in DNS: _dmarc.snorl.ax TXT v=DMARC1;p=quarantine;sp=quarantine;adkim=r;aspf=r;fo=1;rf=afrf;rua=mailto:admin@snorl.ax This requests mail servers to quarantine (do not discard, but separate from regular messages) any email that fails either SPF or DKIM checks. The report will be admin@snorl.ax . Optional: Set up Author Domain Signing Practices (ADSP) Add an ADSP policy to the domain saying that all emails from the domain should be DKIM-signed: _adsp._domainkey.snorl.ax TXT dkim=all Key Rotation The reason the YYYYMM format is used for the selector is that best practice calls for changing the DKIM signing keys every so often (monthly is recommended, and no longer than every 6 months). Generate it in my home dir: $ opendkim-genkey -b 2048 -h rsa-sha256 -r -s YYYYMM -d snorl.ax -v Set the DNS the way it is done above, test it: $ opendkim-testkey -d example.com -s YYYYMM -k example.private Stop opendkim for a moment: $ sudo systemctl stop opendkim Copy it to the path: cp *.private /etc/opendkim/keys/ chown opendkim:opendkim /etc/opendkim/keys/* chmod go-rw /etc/opendkim/keys/* Edit /etc/opendkim/key.table and change the old YYYYMM values to the new selector, reflecting the current year and month. Save the file. Then restart postfix and opendkim to see the effect. Be sure to delete the old YYYYMM._domainkey TXT record. Improve The Password Encryption CRYPT is weak, only uses the first 8 characters of the password, the rest are ignored. CRAM-MD5 protects the password in transit against eaves droppers and somewhat gets good support in clients. So it's the default method doveadm uses 13 14 . To generate a CRAM-MD5 for a password: $ doveadm pw Enter the password twice: Enter new password: Retype new password: Then a hash like this will be generated and printed: {CRAM-MD5}26b633ec8bf9dd526293c5897400bddeef9299fad To do something with the password, access the psql utility again: $ sudo su postgres $ psql mails To check the existing user: SELECT * FROM users; A table like this will be shown: userid | password | realname | uid | gid | home | mail ----------------+----------------------------------------------------------------------------+----------+------+------+----------------------+------ user1@snorl.ax | {CRYPT}xxxxxxxxxxxxx | | 5000 | 5000 | snorl.ax/mails/user1 | user@snorl.ax | {CRYPT}xxxxxxxxxxxxx | | 5000 | 5000 | snorl.ax/mails/user | To check the correspondence between username and mail address: SELECT * FROM virtual; A table similar to the following one will be shown: address | userid ----------------+---------------- xxxx@snorl.ax | user@snorl.ax xxx@snorl.ax | user2@snorl.ax xxxx@snorl.ax | user@snorl.ax To update an existing user with the password: UPDATE users SET password='{CRAM-MD5}26b633ec8bf9dd526293c5897400bddeef9299fad' WHERE userid='user@snorl.ax'; In /etc/dovecot/conf.d/10-auth.conf , disable plaintext login and add cram-md5 to the mechanisms: ... disable_plaintext_auth = yes ... auth_mechanisms = plain login cram-md5 In /etc/postfix/sasl/smtpd.conf , set the corresponding option to: mech_list: login plain cram-md5 In /etc/pam_pgsql.conf , set it to cram-md5: ... pw_type = cram-md5 ... In /usr/local/etc/dovecot-sql.conf , set it to cram-md5: ... default_pass_scheme = CRAM-MD5 ... Then test logging in with encrypted password over SSL in imap and STARTTLS in smtp. Testing SMTP Test sending mail outside of my mail server, like a Gmail account. echo \"Email body text\" | sudo mail -s \"Email subject line\" recipient@gmail.com -aFrom:kim@snorl.ax Sometimes if I test sending while having the @snorl.ax omitted, like this: echo \"Email body text\" | sudo mail -s \"Email subject line\" recipient@gmail.com -aFrom:kim The mail sender will be kim@mail.snorl.ax instaed, due to the default behaviour that mailutils append the hostname to usernames like this. Then the mail will be sent to /var/mail/kim instead. To change the appended domain to the desired @snorl.ax , create /etc/mailutils.conf with the setting: address { email-domain snorl.ax; }; Other configurable options can be seen via $ mail --config-help . Now test SMTP using an Email Client like ThunderBird: Username: user@snorl.ax , the login name of kim@snorl.ax . Password: The one I set above, not the encrypted string. The one before being encrypted. Server name: mail.snorl.ax , or the IP address of the server. SSL: StartTls Port: 587 Block some Brute Forcers Try looking into /var/log/mail.log : Jan 18 15:22:14 snorlax dovecot: auth-worker(5228): pam(tyler@snorl.ax,37.49.224.186): pam_authenticate() failed: Authentication failure (password mismatch?) It's normal that some IP I've never known keeps brute-forcing. Neither do I use any IP from that IP range. Install the package to make the change permanent. $ sudo apt-get install iptables-persistent In this case, block the ip range might be a good idea: $ sudo iptables -A INPUT -s 37 .49.224.0/24 -j DROP Hide sender's IP in the sent mail's header 9 I'm using submission port. Uncomment and add and edit the relevant lines in /etc/postfix/master.cf , the relevant lines should look like this: submission inet n - - - - smtpd -o smtpd_tls_security_level=encrypt -o smtpd_sasl_auth_enable=yes -o smtpd_client_restrictions=permit_sasl_authenticated,reject -o milter_macro_daemon_name=ORIGINATING -o cleanup_service_name=subcleanup Pass header_checks to the new cleanup service in /etc/postfix/master.cf , relevant lines look like this: cleanup unix n - - - 0 cleanup subcleanup unix n - - - 0 cleanup -o header_checks=regexp:/etc/postfix/submission_header_checks Create the file /etc/postfix/submission_header_checks , which will contain the regex that filters offending Received header lines. If smtpd_sasl_authenticated_header is yes , then use this in the file: /&#94;Received:.*\\(Authenticated sender:/ IGNORE Otherwise(also by default when smtpd_sasl_authenticated_header is not set), use this in the file: /&#94;Received:.*\\(Postfix/ IGNORE Restart postfix to see the effect. Integrate Spamassassin 15 17 It's one of the most well-known mail spam filters. Speaking of spam filter, it can be regarded as the most mentioned. Install Spamassassin and its dependencies and dovecot-sieve. $ sudo apt install spamassassin spamc dovecot-sieve Start the service and enable it. $ sudo systemctl start spamassassin $ sudo systemctl enable spamassassin Modify /etc/postfix/master.cf : Change the smtp line to: smtp inet n - - - - smtpd -o content_filter=spamassassin Add the following (a call to our newly-created spamfilter script) at the end: spamassassin unix - n n - - pipe flags=ROhu user=vmail:vmail argv=/usr/bin/spamc -f -e /usr/lib/dovecot/deliver -f ${ sender } -d ${ user } @ ${ nexthop } The flags flags=ROhu don't add anything abnormal but they can be understood here . Modify /etc/mail/spamassassin/local.cf to include the following settings: # Just add an X-Spam-Report header to suspected spam, rather than rewriting the content of the e-mail report_safe 0 # Also we want to add a detailed ham report header to even e-mail that ISN'T suspected to be spam add_header ham HAM-Report _REPORT_ # Set the threshold at which a message is considered spam (3 is usually sufficient) required_score 3.0 Modify /etc/dovecot/conf.d/15-mailboxes.conf to ensure the following lines are included(By default they are included): mailbox Junk { special_use = \\Junk } Edit /etc/dovecot/conf.d/90-sieve.conf and comment the line sieve = ~/.dovecot.sieve , like this: ... plugin { ... #sieve = file:~/sieve;active=~/.dovecot.sieve Edit /etc/dovecot/conf.d/90-plugin.conf as: ... plugin { ... sieve = /etc/dovecot/sieve/default.sieve } Edit /etc/dovecot/conf.d/15-lda.conf : protocol lda { mail_plugins = $mail_plugins sieve } Create folder /etc/dovecot/sieve/ : $ mkdir /etc/dovecot/sieve/ Create file /etc/dovecot/sieve/default.sieve with this content: require \"fileinto\"; if header :contains \"X-Spam-Flag\" \"YES\" { fileinto \"Junk\"; } Change the folder permissions to the virtual email user and group like: $ chown vmail:vmail /etc/dovecot/sieve/ -R Restart postfix, dovecot and spamassassin. $ sudo systemctl restart spamassassin dovecot postfix Try sending a mail to the mail account. The output of tail /var/log/mail.log will be like: Jan 25 13:54:47 pelipper postfix/qmgr[23283]: 9C2C5DBBA7: from=<yumsnorlax@gmail.com>, size=3031, nrcpt=1 (queue active) Jan 25 13:54:47 pelipper spamd[23286]: spamd: connection from ::1 [::1]:33756 to port 783, fd 5 Jan 25 13:54:47 pelipper spamd[23286]: spamd: setuid to vmail succeeded Jan 25 13:54:47 pelipper spamd[23286]: spamd: creating default_prefs: /var/mail/.spamassassin/user_prefs Jan 25 13:54:47 pelipper spamd[23286]: config: created user preferences file: /var/mail/.spamassassin/user_prefs Jan 25 13:54:47 pelipper spamd[23286]: spamd: processing message <1548420881.1041.0@gmail.com> for vmail:5000 Jan 25 13:54:47 pelipper postfix/smtpd[23313]: disconnect from mail-pg1-x530.google.com[2607:f8b0:4864:20::530] ehlo=2 starttls=1 mail=1 rcpt=1 data=1 quit=1 commands=7 Jan 25 13:54:49 pelipper spamd[23286]: spamd: clean message (0.9/3.0) for vmail:5000 in 2.7 seconds, 3164 bytes. Jan 25 13:54:49 pelipper spamd[23286]: spamd: result: . 0 - DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,FREEMAIL_FROM,HTML_MESSAGE,RCVD_IN_DNSWL_NONE,SPF_PASS,TRACKER_ID,TVD_SPACE_RATIO scantime=2.7,size=3164,user=vmail,uid=5000,required_score=3.0,rhost=::1,raddr=::1,rport=33756,mid=<1548420881.1041.0@gmail.com>,autolearn=no autolearn_force=no Jan 25 13:54:49 pelipper dovecot: lda(user2@snorl.ax): sieve: msgid=<1548420881.1041.0@gmail.com>: stored mail into mailbox 'INBOX' Jan 25 13:54:49 pelipper postfix/pipe[23326]: 9C2C5DBBA7: to=<user2@snorl.ax>, orig_to=<kim@snorl.ax>, relay=spamassassin, delay=3.3, delays=0.58/0.01/0/2.7, dsn=2.0.0, status=sent (delivered via spamassassin service) Jan 25 13:54:49 pelipper postfix/qmgr[23283]: 9C2C5DBBA7: removed Try sending another mail with this subject: XJS*C4JDBQADN1.NSBN3*2IDNEN*GTUBE-STANDARD-ANTI-UBE-TEST-EMAIL*C.34X . The output of tail /var/log/mail.log will be like this: Jan 25 13:56:31 pelipper postfix/qmgr[23283]: 43CFADBBA7: from=<yumsnorlax@gmail.com>, size=3103, nrcpt=1 (queue active) Jan 25 13:56:31 pelipper spamd[23286]: spamd: connection from ::1 [::1]:33770 to port 783, fd 5 Jan 25 13:56:31 pelipper spamd[23286]: spamd: setuid to vmail succeeded Jan 25 13:56:31 pelipper spamd[23286]: spamd: processing message <1548420985.1041.1@gmail.com> for vmail:5000 Jan 25 13:56:31 pelipper postfix/smtpd[23334]: disconnect from mail-pl1-x62d.google.com[2607:f8b0:4864:20::62d] ehlo=2 starttls=1 mail=1 rcpt=1 data=1 quit=1 commands=7 Jan 25 13:56:33 pelipper spamd[23286]: spamd: identified spam (999.8/3.0) for vmail:5000 in 2.4 seconds, 3235 bytes. Jan 25 13:56:33 pelipper spamd[23286]: spamd: result: Y 999 - DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,FREEMAIL_FROM,GTUBE,HTML_MESSAGE,RCVD_IN_DNSWL_NONE,SPF_PASS,TVD_SPACE_RATIO scantime=2.4,size=3235,user=vmail,uid=5000,required_score=3.0,rhost=::1,raddr=::1,rport=33770,mid=<1548420985.1041.1@gmail.com>,autolearn=no autolearn_force=no Jan 25 13:56:33 pelipper dovecot: lda(user2@snorl.ax): sieve: msgid=<1548420985.1041.1@gmail.com>: stored mail into mailbox 'Junk' Jan 25 13:56:34 pelipper postfix/pipe[23343]: 43CFADBBA7: to=<user2@snorl.ax>, orig_to=<kim@snorl.ax>, relay=spamassassin, delay=2.9, delays=0.46/0.01/0/2.4, dsn=2.0.0, status=sent (delivered via spamassassin service) Jan 25 13:56:34 pelipper postfix/qmgr[23283]: 43CFADBBA7: removed The spam filter is now working. A spam will go directly into the Junk Folder. Solve URIBL_BLOCKED 16 X-Spam-HAM-Report: * 0.0 URIBL_BLOCKED ADMINISTRATOR NOTICE: The query to URIBL was * blocked. See * http://wiki.apache.org/spamassassin/DnsBlocklists#dnsbl-block * for more information. SpamAssassin will perform many DNS lookups for NetworkTests to significantly improve scoring of messages primarily by DNSBlocklists like Spamhaus, SORBS, etc. This information needs to be cached locally to improve performance and limit the number of external DNS queries since some DNSBlockLists have limits on free usage. A local DNS caching server should not forward to other DNS servers to ensure your queries are not combined with others. Forwarding to other DNS servers often results in URIBL_BLOCKED or similar rule hits meaning you have gone over their free usage limit. $ sudo apt-get update $ sudo apt-get install unbound Then it is running and the corresponding service is enabled. Add this to /etc/spamassassin/local.cf : dns_available yes dns_server 127.0.0.1 Test it out. With these output it's now working. Spamhaus Zen: $ dig + short 2.0.0.127 . zen . spamhaus . org @127.0.0.1 127.0.0.10 127.0.0.4 127.0.0.2 SORBS DUL: $ dig 2.0.0.127 . dul . dnsbl . sorbs . net + short @127.0.0.1 127.0.0.10 URIBL: $ dig test . uribl . com . multi . uribl . com txt + short @127.0.0.1 \"permanent testpoint\" HowTo/DovecotPostgresql - Dovecot Wiki ↩ Email with Postfix, Dovecot, and MySQL - Linode ↩ Debian Backports - Instructions ↩ centos - How do I change Dovecot virtual user passwords? - Server Fault ↩ BasicConfiguration - Dovecot Wiki ↩ Postfix SASL Howto ↩ Configure SPF and DKIM With Postfix on Debian 9 ↩ Postfix - Opendkim - Unable to connect to local socket ↩ When sending email with Postfix, how can I hide the sender's IP and username in the Received header? ↩ Checking FQDN, Reverse-DNS/PTR, MX record ↩ Postfix - Mail Alias ↩ Postfix Configuration Parameters ↩ HowToCRAM/MD5 - Dovecot Wiki ↩ Authentication/PasswordSchemes - Dovecot Wiki ↩ IntegratedSpamdInPostfix - Spamassassin Wiki ↩ CachingNameserver - Spamassassin Wiki ↩ postfix mta - How to move spam to spam folder? - Stack Overflow ↩","tags":"Terminal","url":"https://test.snorl.ax/terminal/2018/12/27/running-email-service-on-my-own-server/"},{"title":"Cold Winter in 2018!","text":"","tags":"Browser","url":"https://test.snorl.ax/browser/2018/12/08/cold-winter-in-2018/"},{"title":"Waiting for Pray For The Wicked","text":"Released videos...... Say Amen Naughty story!😏 (Fuck A) Silver Lining (Audio) Beyoncé~ Lemonade~ Another cite to a song of a celebrity🐼 Reminds me of \"Oops, I did it again\" things~ It is certainly a brilliant year with Fall Out Boy and Panic! At The Disco releasing their album😇Looking forward to it!","tags":"Browser","url":"https://test.snorl.ax/browser/2018/05/04/waiting-for-pray-for-the-wicked/"},{"title":"Mania in Shanghai","text":"Pheonix Passionate start!😋 Irresistable Sugar, we're goin' down Immortals Young Volcanos Ameican Beauty / American Psycho The kids ain't alright Centuries The Last Of The Real Ones Young And Menace This time he gave up on trying that electro part!😆 Well done! Dance, dance Wilson (Expensive Mistakes) One of my favourites in the mania album! I'll stop wearing black when they make darker color~ Jet Pack Blue This Ain't The Scene Hold Me Tight Or Don't One of my favourites in the mania album! Hold me tight!😃 Where Is Your Boy Nice try before singing🤣Oldie but still goodie! Thnks fr th mmrs Thnks fr th mmrs!🤗 Champion They took a break for a while after this song. Uma Thurman Light 'Em Up The camera dimmed their torchlights. It was much brighter on the scene!🤠 Saturday The show is really impressive with Patrick's powerful voice and the music part of Andy, Pete and Joe's. The hit album AB/AP is not my piece of cake. But it's not bad to hear the track Uma Thurman from it. It ended with Saturday . It's really a pity that they didn't play What A Catch, Donnie or any other songs from Folie à Deux . That is a really awesome and underrated album, in a way, better than their reunion hit album Save Rock And Roll .","tags":"Browser","url":"https://test.snorl.ax/browser/2018/05/02/mania-in-shanghai/"},{"title":"A mania you can't miss","text":"On January 18, Mania, Fall Out Boy's new studio album, was released on Google Play Music one day ahead of the release date of the Audio CD form. The music video of a album track, \"Church\", was released on Youtube. Previously released music video from the album: On January 19, The audio CD form was released. And they did a LIVE on Good Morning America. On January 22, Fall Out Boy released the video where Patrick did the magic nerd stuff about \"Church\" on Twitter. The voice of an 👼 watch back when Patrick was in the studio recording vocal takes for Church #blessed #nerdstuff #FOBMANIA pic.twitter.com/GpbaogM9Zv — Fall Out Boy (@falloutboy) January 23, 2018 Pete Wentz did a LIVE with the album music played while bathing and doing some Q&A. https://t.co/U9jm3hqX4i — pw (@petewentz) January 22, 2018 Buy a copy if u haven't done that! You can't miss the mania! I have been listenin' to the whole album like hundreds of times since buying one on Google Play Music!","tags":"Browser","url":"https://test.snorl.ax/browser/2018/01/23/a-mania-you-cant-miss/"},{"title":"Start to enjoy music","text":"Not to stuff the place with useless things. I think the category Enjoy is too empty! It's not due to lack of joy in my life, but too many new things to try for me. I'm now enjoying my life by trying some things, such as trying Arch Linux on a Virtualbox, wandering around laptops (though there's no need to obtain another one). In the near future, I'll make a switch from Debian to Arch Linux when there's a wired network for me. And I'll make a post in the category Try about the process. Arch Linux could be as much lightweight as u want! Back to the topic, music. Lately Katy Perry has released two singles, \"Chained to the Rhythm\" and \"Bon Appétit\", for her upcoming fifth album, \"Witness\". Speaking of the singer, who is famous for her well sold singles and albums, I actually didn't pay much attention to her just 'cause of her being that famous, until I heard her debut album, \"One of the boys\". Katy Perry - One of the boys 1. One of the Boys Here comes a cute girl who wants to be one of ur girls! Katy is cute and desperate for a true love despite being that strong. The flower is the desire from a woman waiting to be loved. Would u? 2. I Kissed A Girl Click to watch the video She did and liked it! One funny thing about the song: Whether u r a boy or a girl, u r most likely to admit u r gay when u sing it! \"I kissed a girl and I liked it! Hope my boyfriend don't mind it!\" 3. Waking Up in Vegas Click to watch the video Not until I saw the video did I get the meaning of the song. About gambler and debt? I thought it was about cruelty and difficulty in a big city! 4. Thinking Of You Click to watch the video I love the sad song and love the video. It's about her beloved and lost lover. She expresses the feeling in her own way and voice. Click to watch the extended video about the story behind that video 5. Mannequin She fell in love with a dead machine? Stupid story of a cute girl! Just toss it! 6. Ur So Gay She must know gays pretty well. :D 7. Hot n Cold Click to watch the video I like the video pretty much. She looks a drama! 8. If You Can Afford Me A loving me could also buy me. &#94;0&#94; 9. Lost The song is talking about her striving in a new city, lost among fair-weather friends and many things. \"Know the way and still so lost\". It might be talking about the story of us. We, as a young individual, are living on our own in such a situation. Kinda love the song and in sync with it. 10. Self Inflicted A \"stick to loving u though being hurt\" song~ Amazing background music~ 11. I'm Still Breathing Breathing....... And listen to the songs below....... Songs say louder than words. 12. Fingerprints 13. I Think I'm Ready 14. A Cup of Coffee 15. Electric Feel 16. Black and Gold Generally it's a wonderful album. All of the songs r written by Katy Perry. Cute songs! BTW, I do not hook up and Long shot from Kelly Clarkson's All I Ever Wanted r written by Katy Perry too. However, I don't like her new \"fun and dance-y and dark and light\" style. But I'll keep watching. She made a brilliant debut. It's relaxing to listen to this radio station with nothing to worry. After these, here comes an experimental song, Lost River: . It's nice to listen to this when u r down...... If u like, watch this:","tags":"Browser","url":"https://test.snorl.ax/browser/2017/05/22/start-to-enjoy-music/"},{"title":"Goodbye KeyCDN! Hello Gitlab!","text":"Well the site had been hosted on KeyCDN for about weeks before I couldn't bear the waiting time for even a minor file. See the result below: That lagging time is not worth the money, I decided to try on Gitlab cause there's no need to spend much on other CDNs, whose SSL support is SNI and SAN support is rather expensive. After a while of cloning and pushing and assign SSL, I ran the tests below: It's really a waste of money when it comes to KeyCDN, while Gitlab is an amazing choice, though the SSL things need manually updating on Gitlab. Goodbye KeyCDN! Hello Gitlab! I've just been using Gitlab for a while and begin to love it! All I need to do is write and update and the rest procedures r automatically done by the runner! To make things better, I just used CloudFlare's CDN for it, the speed has improved dramatically, which is well worth the loss of the old browser users, meaning I am finally back to CloudFlare CDN! 2016-12-30: Just made some tests between Gitlab Pages and Github Pages about the speed. They were both sped up with Cloudflare. No need in uploading those things, 'cause it's basically about data. On the same image 33 kb, in Stockholm Github pages performed better with the time of 450 ms while Gitlab spent 995 ms, in Melbourne Github did it again with 497 ms while Gitlab spent 1.54 s. Globally, Github is faster. Just moved to Github. 2018-01-12: To migrate from a server to another, I have to restore my backup. Then today I tried Gitlab to backup and restore. Everything worked like a charm fastly and conveniently with a free gitlab private (which I hadn't really care about when switching from Gitlab Pages to Github pages) repository in which there exists several branches. Then I realized how long I hadn't used Github since the last time. Also, with Netlify, the cert will look much more decent and be auto-renewed. So I just migrated the blog to Gitlab. After speedtest, I finally couldn't stand the speed loss again. 184.8kB in 2s or so almost everywhere. Is a Netlify page really using CDN? For the speed, I moved the blog back to Github PAGES + Cloudflare again. 2018-01-14: Moved to Google Firebase. It's not as fast as Github pages + Cloudflare, but the SSL time beats the CF. I can have enough privacy with my files. 2018-01-15: No way. It's a shared cert on Firebase. After the comparation below, I decided to move back to Gitlab+Cloudflare, 'cause I know I value more about privacy now. Gitlab+CloudFlare has an okay speed for larger files. Repeated Views Load Time Of a 220.7 kB image (With CloudFlare CDN): Area Gitlab Firebase San Jose 300ms 49ms New York 374ms 173ms Melbourne 64ms 52ms Stockholm 115ms 34ms More about Gitlab+CF: Area DNS SSL Connect Send Wait Receive Total San Jose 2ms 22ms 23ms 1ms 268ms 6ms 322ms New York 0ms 79ms 114ms 1ms 105ms 150ms 451ms Melbourne 0ms 18ms 19ms 0ms 25ms 19ms 81ms Stockholm 0ms 18ms 19ms 0ms 88ms 7ms 132ms More about Firebase+CF: Area DNS SSL Connect Send Wait Receive Total San Jose 2ms 34ms 34ms 0ms 6ms 6ms 49ms New York 0ms 58ms 77ms 1ms 22ms 72ms 230ms Melbourne 0ms 20ms 21ms 0ms 9ms 19ms 69ms Stockholm 0ms 17ms 18ms 0ms 9ms 6ms 50ms About first-time view? The difference is larger. For instance, in Australia, Gitlab is 1.2s and Firebase is 58ms. Also, just made a comparation between Gitlab, Github and Firebase on larger files: The First of Repeated Views Load Time Of a 4.8MB image (With Cloudflare CDN): Area Github Firebase Gitlab San Jose 342ms 1.27s 839ms New York 659ms 1.17s 677ms Melbourne 2.36s 3.85s 2.87s Stockholm 3.80s 1.25s 1.46s Github+CF: Area DNS SSL Connect Send Wait Receive Total San Jose 2ms 24ms 25ms 0ms 247ms 68ms 366ms New York 2ms 47ms 49ms 1ms 146ms 459ms 705ms Melbourne 2ms 19ms 19ms 0ms 1.90s 440ms 2.38s Stockholm 2ms 19ms 20ms 0ms 3.71s 68ms 3.81s Firebase+CF: Area DNS SSL Connect Send Wait Receive Total San Jose 2ms 30ms 30ms 0ms 866ms 373ms 1.30s New York 3ms 61ms 63ms 1ms 634ms 468ms 1.23s Melbourne 2ms 18ms 19ms 0ms 3.37s 455ms 3.87s Stockholm 2ms 17ms 18ms 0ms 1.15s 74ms 1.26s Gitlab+CF: Area DNS SSL Connect Send Wait Receive Total San Jose 0ms 30ms 31ms 0ms 321ms 486ms 868ms New York 0ms 39ms 41ms 0ms 112ms 523ms 715ms Melbourne 0ms 23ms 24ms 0ms 1.04s 1.80s 2.89s Stockholm 0ms 21ms 21ms 0ms 577ms 862ms 1.48s 2018-01-20: All the static assets on the site will be using the original CDN on the github.io domain. 2018-01-21: After testing and pondering, the assets of my blog, hosted on Github are now sped up by Cloudflare. 2018-01-22: Moved the site back to Github, whose speed lures me into doing so. I'll consider moving back to Gitlab once the size reaches the limit. 2018-05-01: The News: Custom domains on GitHub Pages gain support for HTTPS , now the blog's cert is automatically generated by Github. Even better! 2019-05-06: I switched back to Firebase. There I could have control over caching, redirects, etc. No longer rely on soft link. I'm now directly using Firebase. Just made a speed test on GTMetrix about the isso loading speed on the article : Area With CloudFlare Bare speed Canada 920ms 779.3ms USA 730.9ms 622.9ms UK 238.3ms 152.1ms Brazil 1.48s 1.04s Australia 1.5s 1.02s China 1.69s 1.12s India 948.7ms 699ms Not faster at all. So I'll just stop CF it and make it run barely.","tags":"Terminal","url":"https://test.snorl.ax/terminal/2016/12/08/hosted-by-gitlab/"},{"title":"Tried ISSO and ......","text":"My Isso Style 1. Installation 2. Configuration 3. Inside the Database Well, looking back from 2018 and I have got to say, it's more than light-weight and keeps getting better. Now with isso u could send reply notifications to the subcribed commenters and isso officially supports gravatar. If u r following the things below, be sure to replace username, domain with ur own. Installation Don't install a python package as root, the python packages in the package manager might be outdated and it might interfere with your globally installed packages. 2 (My server running Debian is an example). So it is recommended to use a virtualenv to do it as a non-root user. I install isso using git below to make sure it's up to date so everything in the official documentation 1 takes into effect. Switch to the non-root user if u aren't logged in as it now. For example, I'm logged in as root and want to switch to sim: $ su sim Get into the home directory: $ cd ~ Install the relevant packages: $ sudo apt-get install python-setuptools python-virtualenv python-dev python-pip sqlite3 git build-essential Install Nvm 3 . $ git clone https://github.com/creationix/nvm.git .nvm Open ~/.bashrc , ensure the following lines r included in it and save it 3 : export NVM_DIR=\"$HOME/.nvm\" [ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" # This loads nvm [ -s \"$NVM_DIR/bash_completion\" ] && . \"$NVM_DIR/bash_completion\" # This loads nvm bash_completion Source it. $ source ~/.bashrc Install nodejs 3 . $ nvm install node Install bower. $ npm install -g bower Set virtualenv in a place. $ virtualenv work Get into the environment: $ source work/bin/activate Fetch isso from source and install it. $ git clone https://github.com/posativ/isso.git $ cd isso $ python setup.py develop # or `install` $ make init $ npm install -g requirejs uglify-js jade $ make js Add a user to run isso exclusively: $ sudo useradd isso -d /usr/lib/isso Make a directory for isso and assign it to the user: $ sudo mkdir /usr/lib/isso $ sudo chown -R isso:isso /usr/lib/isso Now switch to the user: $ sudo su isso Get into the directory: $ cd ~ Configuration Create isso.conf , the host should be ur URL (I only run the blog in SSL version, so in my case, it's https://snorl.ax): [general] dbpath = /usr/lib/isso/comments.db host = https://snorl.ax/ [server] listen = http://localhost:8001/ For other things like SMTP, reply notification and gravatar, u can refer to my config Exit to come back as the previous user (In my case, sim ): $ exit Create a symlink to a location in my PATH : $ sudo ln -s /home/sim/work/bin/isso /usr/local/bin/isso About Init Script, I'm using Debian which is using systemd, which is most Linux distributions' choice for service management. Take it for example: I. Create a service /etc/systemd/system/isso.service with the following lines: [Unit] Description = lightweight Disqus alternative [Service] User = isso ExecStart = /usr/local/bin/isso -c /usr/lib/isso/isso.conf run [Install] WantedBy = multi-user.target II. Run the thing and check the status $ sudo systemctl daemon-reload && sudo systemctl start isso && sudo systemctl status isso When it's active and running, enable it so it will start and run every time u reboot into the system: $ sudo systemctl enable isso Integrate into the server I'm using Nginx, and running it in the root of my subdomain isso.snorl.ax , so the relevant server block in /etc/nginx/conf.d/default.conf is like this: server { ... server_name isso.snorl.ax ; ... location / { proxy_pass http : // localhost : 8001 ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header Host $host ; proxy_set_header X-Forwarded-Proto $scheme ; } ... } The location / block is the things needed to be included. Insert into the website The https://isso.snorl.ax/js/embed.min.js should be available. Time to insert the code to comment area (If u get a 404 error it's due to something like the cache settings of ur js files, delete certain lines of it will help): <script data-isso=\"https://isso.snorl.ax/\" src=\"https://isso.snorl.ax/js/embed.min.js\"></script> <section id=\"isso-thread\"></section> Now it's online. Try commenting in the browser. Troubleshoot if it fails. CDN Integration If u wanna implement CDN on it I suggest CloudFlare. Whatever, there will always be a problem about IP with the default configuration. The mail notification about a comment will show the IP of the CDN's instead of the client's. CloudFlare Tutorial about solution: Nginx | Apache I'm using Nginx currently, isso has got the variable X-Forwarded-For for showing true IP, thus there's no need in editing files of isso. Edit /etc/nginx/nginx.conf , make sure the http section contains set_real_ip_from field with the IPs of Cloudflare and real_ip_header is set to X-Forwarded-For , just like this: http { ... set_real_ip_from 103.21.244.0/22; set_real_ip_from 103.22.200.0/22; set_real_ip_from 103.31.4.0/22; set_real_ip_from 104.16.0.0/12; set_real_ip_from 108.162.192.0/18; set_real_ip_from 131.0.72.0/22; set_real_ip_from 141.101.64.0/18; set_real_ip_from 162.158.0.0/15; set_real_ip_from 172.64.0.0/13; set_real_ip_from 173.245.48.0/20; set_real_ip_from 188.114.96.0/20; set_real_ip_from 190.93.240.0/20; set_real_ip_from 197.234.240.0/22; set_real_ip_from 198.41.128.0/17; real_ip_header X-Forwarded-For; ... } If ur Nginx supports ipv6, try the following: http { ... set_real_ip_from 103.21.244.0/22 ; set_real_ip_from 103.22.200.0/22 ; set_real_ip_from 103.31.4.0/22 ; set_real_ip_from 104.16.0.0/12 ; set_real_ip_from 108.162.192.0/18 ; set_real_ip_from 131.0.72.0/22 ; set_real_ip_from 141.101.64.0/18 ; set_real_ip_from 162.158.0.0/15 ; set_real_ip_from 172.64.0.0/13 ; set_real_ip_from 173.245.48.0/20 ; set_real_ip_from 188.114.96.0/20 ; set_real_ip_from 190.93.240.0/20 ; set_real_ip_from 197.234.240.0/22 ; set_real_ip_from 198.41.128.0/17 ; set_real_ip_from 2400: cb00 : :/ 32 ; set_real_ip_from 2606:4700::/32 ; set_real_ip_from 2803: f800 : :/ 32 ; set_real_ip_from 2405: b500 : :/ 32 ; set_real_ip_from 2405:8100::/32 ; set_real_ip_from 2 c0f : f248 ::/ 32 ; set_real_ip_from 2 a06 : 98 c0 ::/ 29 ; real_ip_header X-Forwarded-For ; ... } Notes that the CloudFlare IPs above were up to date when I modified the article, check for urself. If u use another CDN or find that any of the CloudFlare IPs outdated, replace the IPs with the correct ones. Refresh and try commenting. The IP in the mail turns out to be the true IP of the commenter. Isso Official Documentation ↩ Why you should not use Python's easy_install carelessly on Debian ↩ How to install Npm ↩ ↩ ↩","tags":"Terminal","url":"https://test.snorl.ax/terminal/2016/07/12/start-to-use-isso/"},{"title":"Just switched back to Nginx","text":"Several days ago I reinstalled my VPS with new Debian 8.0 x86-64 and oneinstack to get LAMP(Linux+Apache+Mysql+PHP) instead of LNMP(Linux+Nginx+Mysql+PHP) cause I found it a little hard to customize Error Pages like 404 and create redirects. Normally with apache u just need to create .htaccess and insert some lines related to those functions and save the file. It's much easier to configure! Things changed yesterday when I happened to see the newly installed system had used around 360 MB RAM, almost 100 MB higher than the highest used number of my previous LNMP at around 280 MB. What's more, the previous LNMP carried three Wordpress sites, in other words, three PHP+MYSQL sites while the newly installed LAMP carried two static HTML sites generated by Pelican. It looked really terrible as the number of RAM used still kept rising! Searched and the things below seem to be the case: LNMP or LAMP From JqFrameWork The most common software bundle is LAMP in the past. What is LAMP? Linux + Apache + MySQL + PHP How about LNMP? it is almost the same, except the change of the web server from Apache to Nginx. Why there is such change? Loading and performance issue. Apache will consume a lot of memeory, if you are using just very low-end vps, your vps maybe down due to all memory are being used. we have bad experinece in the past for OpenVZ, the apache eat up all memory and the machine shutdown and need reboot. In recent year, Nginx become more popular, few benchmarks make comparison between both, Nginx seems a lot better on load balancing and memory consumption. One of the disadvantage is that you could not use .htaccess anymore. You have to re-learn the syntax of Nginx to adapt your needs. So today I just began backing up and then reinstalled the system and changed the system to Debian 7.0 x86 minimal (Cause x86-64 costs more RAM). Then I reuploaded the things back and configured carefully and now it works like charm! (Since I haven't installed PHP and Mysql it has costed about 17 MB RAM, incredible! ) Ok, about configuration I had tested some codes and the codes below r what I used: Custom Error Pages in Nginx Thank the two sources: Source 1 , Source 2 Configure single page With the code inserted,the configuration file of ur site should look like below: server { listen 80 default_server; listen [::]:80 default_server ipv6only=on; . . . error_page 404 /custom_404.html; location = /custom_404.html { root /usr/share/nginx/html; internal; } } The configuration code of 404 page is: error_page 404 /custom_404.html; location = /custom_404.html { root /usr/share/nginx/html; internal; } custom_404.html is the name of the 404 Page u customized which is located in /usr/share/nginx/html . So configure it to ur liking or need. If u r not sure of the path why not use WinSCP to figure it out? Configure Multiple Pages Yep, u could also configure multiple types like the codes below: server { listen 80 default_server; listen [::]:80 default_server ipv6only=on; . . . error_page 404 /custom_404.html; location = /custom_404.html { root /usr/share/nginx/html; internal; } error_page 500 502 503 504 /custom_50x.html; location = /custom_50x.html { root /usr/share/nginx/html; internal; } } The configuration code of multiple error pages is: error_page 500 502 503 504 /custom_50x.html; location = /custom_50x.html { root /usr/share/nginx/html; internal; } Just edit /custom_50x.html and /usr/share/nginx/html to ur need. I just gave them definations above in Configure single page to make things clear. Personally I prefer the things like this: server { listen 80 default_server; listen [::]:80 default_server ipv6only=on; . . . error_page 403 404 500 502 503 504 /error.html; location = /error.html { root /mypath; internal; } } Yep, it's the code below that configure 403,404,500,502,503,504 pages to one page: error_page 403 404 500 502 503 504 /error.html; location = /error.html { root /mypath; internal; } After configuration Yep that's the point where I stopped before, without which the codes won't be put into effect. Save the file u edited above and use the command to reload Nginx: service nginx restart Create Redirects in Nginx Thank the source and one source(I just couldn't remember sorry) telling me if is not recommanded. For example, they r the redirects I wanna create: http :// x . xx / issue1 -- & gt ; http :// x . xx / shop / issues / custom_issue_name1 http :// x . xx / issue2 -- & gt ; http :// x . xx / shop / issues / custom_issue_name2 http :// x . xx / issue3 -- & gt ; http :// x . xx / shop / issues / custom_issue_name3 ... The solution is quite simple and I'm using the second: For multiple redirects - Way 1 - Variables Put this in my server directive in the configuration file of my site: location / issue { rewrite &#94;/issue(.*) http : // $ server_name / shop / issues / custom_issue_name $ 1 permanent ; } For multiple redirects - Way 2 - Duplicate I could also duplicate it in my server directive in the configuration file of my site: location / issue1 { rewrite &#94;/.* http : // $ server_name / shop / issues / custom_issue_name1 permanent ; } location / issue2 { rewrite &#94;.* http : // $ server_name / shop / issues / custom_issue_name2 permanent ; } ... Besides, earlier I painted a Snorlax face and now it's become my new avatar! Though imperfect, it's meaningful for me! BTW, if u wanna use <pre> with colored,underlined or any other-styled code inside, use .html instead of .md to make a post. In markdown, * inside the <pre>...</pre> or any other html elements would just be interpreted into italic words( <em>...</em> in html code) when there's another * behind. So use TAB in markdown to make a <pre>...</pre>","tags":"Terminal","url":"https://test.snorl.ax/terminal/2016/07/06/back-to-nginx/"},{"title":"Enjoy The Life!","text":"Categories r renamed! 2016-07-04: DIY has been renamed to Try , and Life has been renamed to Enjoy . Kinda personal. 2018-01-22: The name of the collection Life has changed to Browser . Still, enjoy the life in a browser! BTW, Try has changed to Terminal . Death Of A Bachelor 2017-07-04: Finally I've got it! 😀 2018-01-22: Just became a user of Google Music. Digital Music is much more portable and suitable for me now! New look! 2018-01-22: Minimal life is efficient! Isn't it?","tags":"Browser","url":"https://test.snorl.ax/browser/2016/07/04/enjoy-the-life/"},{"title":"Panic! At The Disco - Bohemian Rhapsody","text":"Yesterday at Kate's Blog , I was really glad to see the song on their BBC Radio 1 Big Weekend! So I searched Youtube for it! I'd like to say, WOW BTW, Kate's Blog One Fall Out At The Disco is really my piece of cake and she shares many same thought as mine! Back to the point, enjoy Urie's Bohemian Rhapsody on his BBC Radio 1 Big Weekend: The performance above beat this one with most views on the Youtube(Personally, I think Urie sang in a more relaxed way in the one above. Both r fantastic!):","tags":"Browser","url":"https://test.snorl.ax/browser/2016/06/04/panic-at-the-disco-bohemian-rhapsody/"},{"title":"Make full use of CloudFlare","text":"Before using, u should know that Cloudflare isn't flawless for free, ur site using Cloudflare's CDN on Free Plan or Pro Plan won't be accessible on some old browsers, such as the ones in Windows XP, 'cause the ssl is based on SNI like other CDN. To make ur site on a CDN support all browsers, u'll have to spend a lot more extra money, which is not a must for a personal site. If u made the decision, check my steps, which might meet the needs of ours(I'm supposing we're personal users): Save ur money on the things such as VPS if u r only using it for ur personal blog. Try Github Pages (Click on ME ) or Gitlab Pages (Click on ME ) instead. The former is faster, the latter is easier to use. Choose one to ur liking. I'm currently using Github pages. However, I suggest people who r not familiar with the Git commands use Gitlab Pages. U should note that both of them r used to serve static resources like html, png, css, js. Find the details about the static generators if u haven't decided: Click Here . It makes the process more automatical. Generate and publish. On Gitlab pages it could be done automatically by Shared Runners. On Github pages u should generate ur site locally and then upload to ur Github repository using Git commands. Check the tutorial of ur chosen generator and do step by step. Make sure the DNS of ur domain is powered by Cloudflare. Bind the domain to ur site. On Gitlab pages u could use custom SSL for ur domain (Alternative, u could use CloudFlare's Origin CA, check this step-by-step guide out). On Github pages u could use custom SSL for ur domain too ans the the cert is automatically generated via Let's Encrypt for u. (For Gitlab, since Github pages implement Fastly CDN itself.) Turn on CDN on the binded domain. (For Gitlab, Recommended if u want ur site served in https version) Turn the SSL option to Full (Full (Strict) if u have valid cert or CloudFlare CA on the domain applied). (Recommended) For comments, Disqus (Click on ME ) will meet our need and is easy and free to use. If u care about security and possess a VPS or server, try isso. I've written a guide (Click on ME ) about it and currently I'm using it. Make full use of Page Rules, my Page Rules when I was using Gitlab pages: 1. http://*snorl.ax/* Forwarding URL: (Status Code: 301 - Permanent Redirect, Url: https://$1snorl.ax/$2) 2. https://isso.snorl.ax/* SSL: Strict, Cache Level: Bypass 3. *snorl.ax/* Browser Cache TTL: 8 days, Cache Level: Cache Everything, Edge Cache TTL: a month, automatic_https_rewrites: On The first one is about http to https redirects on all domains. The second one is about the SSL option of my comment server. The third one is a must making ur whole site including .html files cached on CloudFlare Edge servers, thus making ur site faster. DONE! Enjoy ur personal site! Be sure to \"Purge Everything\" in the Caching Tab once u update ur site!","tags":"Terminal","url":"https://test.snorl.ax/terminal/2016/05/27/make-full-use-of-cloudflare/"},{"title":"Linda Perry - In Flight","text":"Listened to Linda Perry's In Flight, it's a really gorgeous and peaceful album! In My Dream Sad accompaniment with a strong voice hit my head. Really impressive start! Favourite Lyrics: I want everything / Everything I want / There's no room to turn me upside down Freeway Peaceful music is followed by exciting music. Then in the end it comes back to peace. Yep take me down the freeway! Favourite Lyrics: To be free, of everything / Of everything, yeah Uninvited Start to believe Jesus after hearing. The song is full of happiness and peace. Favourite Lyrics: R u ready? Ready for it all! Success Enormous start. Grave song. Yep, \"Is it what I need\"\" Favourite Lyrics: Will success fail me? / Will it make me free? / What they tell me I should want? / Is it what I need? Life in a bottle Starting with waves makes me groovy. Favourite Lyrics: So there's nothing let for me to say / No there's nothing let for me to say Fill me Up Fill me up let's take a ride! No more answering Favourite Lyrics: Fill me up lets take a ride Knock me out Grave again. Favourite Lyrics: You knocked me out / I can never be the same Too Deep Thoughtful...... Favourite Lyrics: I'm just a dreamer / I can't wake from sleep / I am midflyer / But I'm getting too deep Taken I'm taken too Favourite Lyrics: And by my sweet thighs / I'm still taken Fruitloop Daydream This song bring me back to life again! Favourite Lyrics: Waking up in the dark / Knowing I'm not alone, it's all so familiar Machine Man Machine man machine song. Favourite Lyrics: No lyrics preferred In Flight The start took me in a free flight. Then it made me groovy as the song went on. Favourite Lyrics: (all the other birds) x4","tags":"Browser","url":"https://test.snorl.ax/browser/2016/05/22/linda-perry-in-flight/"},{"title":"12 Ways To Eat Clean All Season Long","text":"Live a little! We've got the 12 cleanest, healthiest, low- and no-carb picks found throughout the holiday season. Healthy holidays are happy holidays! (Source: BodyBuilding ) The holidays are almost upon us—and with them, a not-so-merry minefield of edible indulgences. Becoming savvy about the chemical makeup of what's on the buffet table—be it pre-packaged cookies, frozen hors d'oeuvres, processed grains, or refined sugars—can keep you lean and fit without your missing out on the fun. \"Clean eating is about avoiding packaged products and engaging in a diet rich in non-processed foods—things that come from the earth,\" says Manhattan-based nutritionist Sharon Richter, R.D. \"Think fruits, vegetables, and lean protein sources, like fish.\" Give yourself the gift of good eating this season with 12 of our favorite ways to indulge in the flavor of the holidays without packing on pounds. 1 / Dark Green Vegetables These healthy finger foods are a powerful source of cardiovascular-boosting folate and also very low in carbs (four spears of asparagus contain only 2.5 grams). So, whether it's raw broccoli , asparagus, or baked kale chips, these slimming snacks have the satisfying bonus of crunch. 2 / Shellfish Found on many a holiday-party table, shrimp cocktail, raw oysters , and clams with a spritz of lemon add a super-low-fat, no-carb protein punch to festive snacking, with an added boost of zinc and vitamins B and D . 3 / Cinnamon Not only does this spice conjure up images of warm kitchens and festive baked goods, it also happens to be incredibly good for you. A natural bacteria fighter and memory booster, cinnamon is also a great flavor enhancer on treats like baked apples , Richter says. One teaspoon has only two grams of carbs and six calories. 4 / Matcha It's easy to be tempted by a high-calorie, cream-laden latte, but one tall Starbuck's peppermint white-chocolate mocha has 410 calories and 15 grams of fat. Instead, opt for matcha. This powdered, whole-leaf green tea has zero carbs and is loaded with antioxidants that boost energy and improve brain function. 5 / Lean Meats Opt for lean, baked turkey or chicken breast at the party's carving station and you can have a clean, protein-packed meal with half the fat of beef. Bonus: A three-ounce serving is a low-carb treat with nearly 20 grams of protein. 6 / Pomegranate Pomegranates are abundant during the winter months (and make a festive centerpiece at any holiday gathering). They're also a potent source of antioxidants kicking bad cholesterol, jacked-up blood pressure, and carcinogens to the curb. A half cup of seeds has 16 grams of carbohydrates, but it's also got three healthy grams of fiber and 15 percent of your daily dose of vitamin C. 7 / Tomatoes Condiments are a big no-no when trying to eat clean, so instead of reaching for corn-syrup-laden ketchup or sodium-packed salsa , go for chopped tomatoes with slivered fresh basil for minimal carbs and plenty of vitamin C. 8 / Dark Chocolate It's kind of hard to believe something that tastes so decadent could be good for cardiovascular health—not to mention can help fight premature aging and cancer. But it's true: A one-ounce square is only a 13-gram carbohydrate indulgence. 9 / Roasted Garlic Aromatically irresistible and delicious as a spread on whole-grain toast points, garlic is also a powerful antioxidant and immune-boosting power food that increases blood flow and lowers cholesterol. That's not all: One clove of roasted garlic has only one gram of carbs. 10 / Citrus Abundant in the winter months, citrus fruits are versatile, colorful, immune-boosting beverage companions. Yes, fruit does have carbs—that six-ounce glass of orange juice has 18 grams per ounce—but it's accompanied by a whopping 150% serving of your daily requirement of vitamin C. 11 / Salmon At your next holiday party, feel free to indulge in that plate of salmon . You'll get not just a healthy shot of omega-3 fatty acids but a jolt of B3s and 12s to boot, says Richter. Just make sure you look for wild-sourced versions, as they tend to be healthier than farmed fish. 12 / Whole Grains Refined grains have their healthy bran and germ stripped away, so all their good-for-you properties are lost in the process, too. Whole-grain crackers , bread , pita, popcorn, and brown rice , on the other hand, are great sources of munchable complex carbohydrates (a one-ounce serving of whole-wheat crackers has about 19 grams of carbs, and the carb content of one cup of airpopped popcorn is only six grams) with loads of magnesium, selenium, and fiber. They're also low in fat but big on texture and flavor.","tags":"Browser","url":"https://test.snorl.ax/browser/2016/05/13/12-ways-to-eat-clean-all-season-long/"}]}